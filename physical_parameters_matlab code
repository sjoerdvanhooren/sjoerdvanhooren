To use our physical parameters as regressors in the fMRI analysis, first we have to do some pre-processing of these parameters. 
As we used the Siemens systems to measure pulse and respiration data, the output came in the .puls and .resp files. 

We need to reform this data into a .txt format for FSL PNM, in order to use it as regressor in our FSL FEAT. 
In this document it is described how this was done. The text file should contain three collums. One column for the respiratory data, the second column for the pulse data and the third column with the scanner triggers. 

We will go through the formation of these columns step by step. We used Matlab R2021b to do so. 

First we used to following codes: 

  --> The code used for the respiration parameters, which comes in the .resp file from the Siemens respiratory belt. 
----------------------------------------------------------------------------------------------------------------
function [signal, time] = siemens_RESPload_dicom_tijden(fname,varargin);

%function [resp time] = RESP_load(fname, optname, optval);
%
% A loader for the Respiration data coming off of the Siemens Trio system.
%  
%   INPUT:
%   fname = name of text file with respiration information
%   opts        = options on extracting the ECG signal
%
%     a) 'Hz': Sampling Rate of the signal (50Hz default)
%
%     b) 'TR': Sampling rate of scans (2000ms default)
%
%     c) 'iPatOn': whether or not parallel imaging is on (default true)
%
%     d) 'EndClip': Lag time to stop the physio recording (1040ms default)
%     
%   OUTPUT
%   resp   = vector of the respiration waveform
%   time   = vector of timestamps (in seconds)
%
%  
% Written by T. Verstynen (November 2007) and J Schlerf (August 2008)
%
% Rewritten to optimize loading time taking heavily from code written by V.
% Deshpande and J. Grinstead, Siemens Medical Solutions (March 2009) 
%
% Liscensed under the GPL public license (version 3.0)

% Liscensed under the GPL public license (version 3.0)

if nargin < 1 | isempty(fname);
  [filename filepath] = uigetfile('*.resp','Get Resipration File');
  fname = fullfile(filepath,filename);
end

TR = 2000;   % Acquisition time (for working around dummy scans)
iPatOn = 1;  % If iPat is on, skip an extra TR
EndClip = 0; % Always seems to take a second and change to finish
StartClip = 51246; % Some systems have to have a pause between record onset and gradient onset
Hz = 50;   % Sampling Frequency
DOSAVE = 0; % Saving Flag

if nargin > 1 & ~isempty(varargin)
    for i = 1:2:length(varargin)
        optlabel = varargin{i};
        optvalue = varargin{i+1};

        if isnumeric(optvalue); optvalue = num2str(optvalue); end;
        eval(sprintf('%s = %s;',optlabel, optvalue));

    end;
end;


fclose('all');fid=fopen(fname);
ignore=textscan(fid,'%s',21); %Ignore first 21 values.

data   = textscan(fid,'%u16'); %Read data until end of u16 data.
footer = textscan(fid,'%s');   %Read in remaining data (time stamps and statistics).


%Get time stamps from footer:
for n=1:size(footer{1},1)
    if strcmp(footer{1}(n),'LogStartMDHTime:')  %log start time
        LogStartTime=str2num(footer{1}{n+1});
    end
    if strcmp(footer{1}(n),'LogStopMDHTime:')   %log stop time
        LogStopTime=str2num(footer{1}{n+1});
    end
    if strcmp(footer{1}(n),'LogStartMPCUTime:') %scan start time
        ScanStartTime=str2num(footer{1}{n+1});
    end
    if strcmp(footer{1}(n),'LogStopMPCUTime:')  %scan stop time
        ScanStopTime=str2num(footer{1}{n+1});
    end
end

% Defining the correct endtime of the log file. 
Endclip=LogStopTime-ScanStopTime
s = (-1)^Endclip;
    if s == -1
        Endclip=Endclip+1;
    else 
        Endclip=Endclip;
    end

% Remove the systems own evaluation of triggers.
t_on  = find(data{1} == 5000);  % System uses identifier 5000 as trigger ON
t_off = find(data{1} == 5003);  % System uses identifier 5003 as trigger OFF

% Filter the trigger markers from the data
data_t=transpose(1:length(data{1}));
indx = setdiff(data_t(:),union(t_on,t_off)); %Note: depending on when the scan ends, the last size(t_off)~=size(t_on).
signal = data{1}(indx);
time = (1:length(signal))./Hz;

% Clip the time series to begin and end with the scan.
start = StartClip*(Hz/1000);
start = round(start);
stop = EndClip*(Hz/1000)+mod(length(signal(1:end)),Hz);

% Reset vectors;
signal = double(signal(start+1:end-stop)');
time = time(start+1:end-stop);
time = time(:)-time(1);

% saving, then save
if DOSAVE
    [fpath fname fext] = fileparts(fname);
    save(fullfile(fpath,[fname '.mat']),'signal','time');
end;
----------------------------------------------------------------------------------------------------------------





  --> The code used for the cardiac parameters, which comes in the .puls data type from the Siemens MRI finger pulse oximeter. 
----------------------------------------------------------------------------------------------------------------
function [signal time] = siemens_PPOload_Exc6000_dicom_tijden(fname,varargin);

%
% A loader for the PulseOx data coming off of the Siemens Trio system.
%  
%   INPUT:
%   fname = name of text file with respiration information
%   opts        = options on extracting the ECG signal
%
%     a) 'Hz': Sampling Rate of the signal (50Hz default)
%
%     b) 'TR': Sampling rate of scans (2000ms default)
%
%     c) 'iPatOn': whether or not parallel imaging is on (default true)
%
%     d) 'EndClip': Lag time to stop the physio recording (2040ms default)
%     
%   OUTPUT
%   ppo   = vector of the pulse-ox waveform
%   time  = vector of timestamps (in seconds)
%
%  
% Written by T. Verstynen (November 2007);
% Hacked a bit by J Schlerf (August 2008)
%
% Rewritten to optimize loading time taking heavily from code written by V.
% Deshpande and J. Grinstead, Siemens Medical Solutions (March 2009) 
%
% Liscensed under the GPL public license (version 3.0)


% If no input given, then get the file
if nargin < 1 | isempty(fname);
  [filename filepath] = uigetfile('*.puls','Get PPO File');
  fname = fullfile(filepath,filename);
end

TR = 2000;   % Acquisition time (for working around dummy scans)
iPatOn = 1;  % If iPat is on, skip an extra TR
EndClip = 0; % Always seems to take a second and change to finish
StartClip = 51276; % Some systems have to have a pause between record onset and gradient onset
Hz = 50;   % Sampling Frequency
DOSAVE = 0; % Saving Flag
StartJump = 0; % Number of shift samples to adjust at the beginning of
               % the series

if nargin > 1 & ~isempty(varargin)
    for i = 1:2:length(varargin)
        optlabel = varargin{i};
        optvalue = varargin{i+1};

        if isnumeric(optvalue); optvalue = num2str(optvalue); end;
        eval(sprintf('%s = %s;',optlabel, optvalue));

    end;
end;

fclose('all');fid=fopen(fname);
ignore=textscan(fid,'%s',18); %Ignore first 18 values.

data   = textscan(fid,'%u16'); %Read data until end of u16 data.
footer = textscan(fid,'%s');   %Read in remaining data (time stamps and statistics).

%Get time stamps from footer:
for n=1:size(footer{1},1)
    if strcmp(footer{1}(n),'LogStartMDHTime:')  %log start time
        LogStartTime=str2num(footer{1}{n+1});
    end
    if strcmp(footer{1}(n),'LogStopMDHTime:')   %log stop time
        LogStopTime=str2num(footer{1}{n+1});
    end
    if strcmp(footer{1}(n),'LogStartMPCUTime:') %scan start time
        ScanStartTime=str2num(footer{1}{n+1});
    end
    if strcmp(footer{1}(n),'LogStopMPCUTime:')  %scan stop time
        ScanStopTime=str2num(footer{1}{n+1});
    end
end

% Defining the correct endtime of the log file. 
Endclip=LogStopTime-ScanStopTime
s = (-1)^Endclip;
    if s == -1;
        Endclip=Endclip+1;
    else 
        Endclip=Endclip;
    end

% Remove the systems own evaluation of triggers.
t_on5000  = find(data{1} == 5000);  % System uses identifier 5000 as trigger ON
t_on6000  = find(data{1} == 6000);  % System uses identifier 5000 as trigger ON
t_on = [t_on5000;t_on6000];
t_on = sort(t_on);
t_off = find(data{1} == 5003);  % System uses identifier 5003 as trigger OFF

% Filter the trigger markers from the data
data_t=transpose(1:length(data{1}));
indx = setdiff(data_t(:),union(t_on,t_off)); %Note: depending on when the scan ends, the last size(t_off)~=size(t_on).
signal = data{1}(indx);
time = (1:length(signal))./Hz;

% Clip the time series to begin and end with the scan.
start = StartClip*(Hz/1000);
start = round(start);
stop = EndClip*(Hz/1000)+mod(length(signal(1:end)),Hz);

% Reset vectors;
signal = double(signal(start+1-StartJump:end-stop-StartJump)');
time = time(start+1-StartJump:end-stop-StartJump);
time = time(:)-time(1);

% saving, then save
if DOSAVE
    [fpath fname fext] = fileparts(fname);
    save(fullfile(fpath,[fname '.mat']),'signal','time');
end;
----------------------------------------------------------------------------------------------------------------


Notice that in these codes we have some standard variabeles for our data such as the TR, Hz and the startclip and endclip. 
The startclip and endclip we manually calculated using the starclip/endclip time from the physical logs and the start/end time from the fMRI scan, which can be obtained from the dicom images using osiriX
We obsered that the start/end lagg between the physical logg and scan start is very stable around the times written in the code. 
If someone uses theses codes, they should check whether these times are different in their systems. 



  --> When we rewritten the code from T. Verstynen (November 2007), next step is using it in Matlab. Example for participant 035. 

# Load respiration data .resp
[signal_resp, time_resp]=siemens_RESPload_dicom_tijden;

# Load heart pulsation data .puls
[signal_pulse,time_pulse]=siemens_PPGload_Exc6000_dicom_tijden;

# Transposing respiration and pulse data.   
signal_pulse=signal_pulse';signal_resp=signal_resp';

# produce new variabele
Track_P035_Phys=0

# copy the respiration and pulse data in the first and second column, respectively. 

# copy the scanner trigger data in the third column. We manually made this file placing a scanner trigger (1) at the start of each fMRI volume (see example below). 

# Save the new variabele as .txt format for using it in FSL PNM
dlmwrite('Track_P035_phys_28000.txt',Track_Pxxx_Phys,'delimiter','\t')



Final output example of the .txt file (allthough way longer, column 1 is respiratory data, column 2 is cardiac and column 3 is manual scanner trigger): 
1207	1611	1
1178	1763	0
1178	1955	0
1163	2159	0
1120	2349	0
1076	2516	0
1033	2650	0
1004	2751	0
975	2839	0
975	2904	0
975	2944	0
975	2968	0
989	2970	0
975	2939	0
917	2879	0
902	2791	0
859	2691	0
859	2598	0
888	2506	0
888	2424	0
902	2344	0
917	2265	0
902	2189	0
902	2113	0
888	2034	0
873	1963	0
859	1898	0
844	1831	0
844	1771	0
844	1718	0
859	1668	0
873	1624	0
859	1581	0
859	1546	0
844	1519	0
844	1493	0
844	1474	0
830	1455	0
830	1446	0
830	1444	0
844	1446	0
844	1443	0
830	1443	0
844	1446	0
844	1449	0
873	1450	0
888	1446	0
917	1458	0
946	1501	0
931	1613	0
917	1793	0
902	1996	0
859	2205	0
815	2399	0
786	2566	0
743	2701	0
743	2804	0
728	2878	0
728	2936	0
728	2963	0
714	2965	0
699	2958	0
641	2919	0
598	2841	0
554	2746	0
511	2649	0
511	2556	0
511	2474	0
496	2396	0
482	2311	0
496	2223	0
482	2138	0
482	2058	0
496	1974	0
511	1899	0
511	1828	0
511	1770	0
525	1715	0
554	1659	0
540	1604	0
540	1559	0
554	1523	0
569	1490	0
569	1459	0
569	1433	0
583	1411	0
598	1400	0
612	1393	0
656	1388	0
685	1388	0
714	1389	0
728	1384	0
743	1374	0
801	1374	0
859	1376	0
946	1386	0
1018	1400	0
1076	1448	0
1105	1570	0
1120	1770	0
1149	2003	1
1192	2234	0
1250	2436	0
1308	2599	0
1381	2724	0
1482	2821	0
1555	2889	0
1598	2940	0
1598	2968	0
1627	2964	0
1656	2934	0
1700	2875	0
1729	2786	0
1801	2684	0
1888	2584	0
1975	2494	0
2033	2411	0
2077	2330	0
2120	2253	0
2164	2178	0
2207	2100	0
2280	2018	0
2323	1941	0
2381	1865	0
2468	1793	0
2512	1728	0
2584	1674	0
2642	1629	0
2700	1593	0
2729	1556	0
2773	1523	0
2831	1499	0
2874	1480	0
2918	1466	0
2961	1450	0
3005	1441	0
3048	1436	0
3063	1430	0
3063	1429	0
3092	1423	0
3106	1419	0
3150	1416	0
3164	1418	0
3135	1435	0
3077	1499	0
2961	1635	0
2845	1831	0
2715	2063	0
2613	2290	0
2512	2484	0
2425	2643	0
2352	2769	0
2280	2866	0
2178	2936	0
2062	2978	0
1961	2998	0
1874	2988	0
1772	2931	0
1700	2850	0
1627	2760	0
1584	2661	0
1569	2569	0
1555	2481	0
1540	2400	0
1526	2321	0
1511	2249	0
1453	2183	0
1439	2110	0
1424	2029	0
1381	1954	0
1366	1890	0
1352	1829	0
1337	1769	0
1323	1718	0
1308	1679	0
1279	1645	0
1250	1611	0
1250	1581	0
1250	1553	0
1250	1529	0
1236	1513	0
1221	1495	0
1236	1479	0
1250	1466	0
1250	1460	0
1265	1458	0
1250	1450	0
1265	1443	0
1294	1438	0
1308	1443	0
1337	1463	0
1352	1521	0
1308	1656	0
1279	1864	0
1265	2100	0
1236	2335	0
1192	2546	0
1178	2728	0
1149	2878	0
1134	2996	0
1134	3090	1
1134	3161	0
1134	3200	0
1120	3204	0
1105	3179	0
1076	3113	0
1062	3010	0
1004	2890	0
1004	2769	0
1018	2654	0
1033	2548	0
1047	2445	0
1047	2346	0
1047	2250	0
1018	2155	0
1018	2063	0
1018	1969	0
1018	1883	0
1004	1801	0
1004	1720	0
1004	1644	0
1018	1584	0
1004	1535	0
1018	1495	0
1004	1456	0
989	1419	0
1004	1384	0
975	1361	0
989	1354	0
975	1346	0
960	1338	0
960	1335	0

